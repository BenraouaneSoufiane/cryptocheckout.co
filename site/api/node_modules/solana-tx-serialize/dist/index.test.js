"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const chai_1 = require("chai");
const mocha_1 = require("mocha");
const index_1 = require("./index");
(0, mocha_1.describe)('serialize/deserializeTransaction', () => {
    it("should serialize correctly", () => {
        const pk = web3_js_1.Keypair.generate();
        const inst = web3_js_1.SystemProgram.createAccount({
            fromPubkey: pk.publicKey,
            newAccountPubkey: pk.publicKey,
            lamports: 0,
            space: 0,
            programId: web3_js_1.SystemProgram.programId,
        });
        const tx = new web3_js_1.Transaction();
        tx.add(inst);
        tx.recentBlockhash = web3_js_1.Keypair.generate().publicKey.toBase58();
        tx.feePayer = pk.publicKey;
        // add signature as well
        tx.sign(pk);
        const serialized = (0, index_1.serializeTransaction)(tx);
        (0, chai_1.expect)(serialized.message).not.empty;
        (0, chai_1.expect)(serialized.signatures).lengthOf(1);
        (0, chai_1.expect)(serialized.signatures[0].signature).not.empty;
        (0, chai_1.expect)(serialized.signatures[0].publicKey).not.empty;
    });
    it("should deserialize correctly", () => {
        const pk = web3_js_1.Keypair.generate();
        const inst = web3_js_1.SystemProgram.createAccount({
            fromPubkey: pk.publicKey,
            newAccountPubkey: pk.publicKey,
            lamports: 0,
            space: 0,
            programId: web3_js_1.SystemProgram.programId,
        });
        const tx = new web3_js_1.Transaction();
        tx.add(inst);
        tx.recentBlockhash = web3_js_1.Keypair.generate().publicKey.toBase58();
        tx.feePayer = pk.publicKey;
        // add signature as well
        tx.sign(pk);
        const deserialized = (0, index_1.deserializeTransaction)((0, index_1.serializeTransaction)(tx));
        (0, chai_1.expect)(deserialized.recentBlockhash).equal(tx.recentBlockhash);
        (0, chai_1.expect)(deserialized.instructions).lengthOf(1);
        (0, chai_1.expect)(deserialized.instructions).deep.equal(tx.instructions);
        (0, chai_1.expect)(deserialized.feePayer).deep.equal(tx.feePayer);
        (0, chai_1.expect)(deserialized.signatures).deep.equal(tx.signatures);
        (0, chai_1.expect)(deserialized).deep.equal(tx);
    });
    it("should serialize with incomplete signatures", () => {
        const pk = web3_js_1.Keypair.generate();
        const feepayer = web3_js_1.Keypair.generate();
        const inst = web3_js_1.SystemProgram.createAccount({
            fromPubkey: pk.publicKey,
            newAccountPubkey: pk.publicKey,
            lamports: 0,
            space: 0,
            programId: web3_js_1.SystemProgram.programId,
        });
        const tx = new web3_js_1.Transaction();
        tx.add(inst);
        tx.recentBlockhash = web3_js_1.Keypair.generate().publicKey.toBase58();
        tx.feePayer = feepayer.publicKey;
        tx.sign(pk);
        tx.signatures.push({
            signature: null,
            publicKey: feepayer.publicKey,
        });
        const deserialized = (0, index_1.deserializeTransaction)((0, index_1.serializeTransaction)(tx));
        (0, chai_1.expect)(deserialized).deep.equal(tx);
    });
});
(0, mocha_1.describe)('base58Transaction', () => {
    it('encoded and decoded correctly', () => {
        const pk = web3_js_1.Keypair.generate();
        const inst = web3_js_1.SystemProgram.createAccount({
            fromPubkey: pk.publicKey,
            newAccountPubkey: pk.publicKey,
            lamports: 0,
            space: 0,
            programId: web3_js_1.SystemProgram.programId,
        });
        const tx = new web3_js_1.Transaction();
        tx.add(inst);
        tx.recentBlockhash = web3_js_1.Keypair.generate().publicKey.toBase58();
        tx.feePayer = pk.publicKey;
        tx.sign(pk);
        const bs58string = (0, index_1.bs58Transaction)(tx);
        const decode = (0, index_1.unbs58Transaction)(bs58string);
        (0, chai_1.expect)(decode).deep.equal(tx);
    });
});
