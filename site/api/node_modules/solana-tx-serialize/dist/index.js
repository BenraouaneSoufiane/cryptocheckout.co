"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unbs58Transaction = exports.bs58Transaction = exports.deserializeTransaction = exports.serializeTransaction = void 0;
const web3_js_1 = require("@solana/web3.js");
const bs58_1 = __importDefault(require("bs58"));
const lodash_1 = require("lodash");
function serializeTransaction(tx) {
    // serialize message
    const msg = tx.serializeMessage();
    const b58string = bs58_1.default.encode(msg);
    // do the same for all signatures
    const sigs = tx.signatures.map((kp) => ({
        signature: kp.signature && bs58_1.default.encode(kp.signature) || null,
        // signature: base58.encode(kp.signature || []),
        publicKey: kp.publicKey.toString(),
    }));
    return {
        message: b58string,
        signatures: sigs,
    };
}
exports.serializeTransaction = serializeTransaction;
function deserializeTransaction(tx) {
    const decodedBuf = bs58_1.default.decode(tx.message);
    const message = web3_js_1.Message.from(decodedBuf);
    const sigs = tx.signatures.map((sig) => ({
        signature: sig.signature && Buffer.from(bs58_1.default.decode(sig.signature)) || null,
        publicKey: new web3_js_1.PublicKey(sig.publicKey),
    }));
    const newTx = web3_js_1.Transaction.populate(message);
    sigs.forEach((sig) => {
        if (sig.signature) {
            newTx.addSignature(sig.publicKey, sig.signature);
        }
        else {
            newTx.signatures.push({ publicKey: sig.publicKey, signature: null });
        }
    });
    return newTx;
}
exports.deserializeTransaction = deserializeTransaction;
function bs58Transaction(tx) {
    return (0, lodash_1.flow)([
        serializeTransaction,
        JSON.stringify,
        Buffer.from,
        bs58_1.default.encode,
    ])(tx);
}
exports.bs58Transaction = bs58Transaction;
function unbs58Transaction(txstring) {
    return (0, lodash_1.flow)([
        bs58_1.default.decode,
        Buffer.from,
        (h) => h.toString(),
        JSON.parse,
        deserializeTransaction
    ])(txstring);
}
exports.unbs58Transaction = unbs58Transaction;
